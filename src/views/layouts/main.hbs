<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form HBS</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"
        integrity="sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/normalizr@3.6.1/dist/normalizr.browser.min.js"></script>
</head>

<body>
    {{{body}}}
    <script src="/socket.io/socket.io.js"></script>

    <!-- Script Normalizr -->
    <script src="https://cdn.jsdelivr.net/npm/normalizr@3.6.1/dist/normalizr.browser.min.js"></script>
    <!-- Script BootstrapJS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
        crossorigin="anonymous"></script>

    <!-- Script Procesos Generales (Socket, Normalizr) -->
    <script>
        /*=============== Denormalizacion de datos ===============*/
        const schemaAuthors = new normalizr.schema.Entity('author', {}, { idAttribute: 'email' })
        const schemaMensaje = new normalizr.schema.Entity('post', { author: schemaAuthors }, { idAttribute: 'id' })
        const schemaMensajes = new normalizr.schema.Entity('posts', { mensajes: [schemaMensaje] }, { idAttribute: 'id' })
        /*================ Coneccion con socket.io ================*/
        const socket = io();
        /*============== Respuestas front del scoket ==============*/
        socket.on('from-server-message', messages => { //Respuesta cuando se envia mensaje
            let mensajesNormSIZE = JSON.stringify(messages).length;
            let mensajesDenorm = normalizr.denormalize(messages.result, schemaMensajes, messages.entities);
            { { !--renderMessages(mensajesDenorm.mensajes) --} }
        })
        /*=============== Renderizado de mensajes ===============*/
        {
            {
                !-- function renderMessages(mensajes) {
                    const cuerpoMensaje = mensajes.map(msg => {
                        return `<span> <span style="color: blue; font-weight: bold">${msg._doc.author}</span>
                        <span style="color: brown"> ${msg._doc.date}</span>
                        :
                        <span style="color: green; font-style: italic">${msg._doc.text}</span></span>
                        <br>`
                    }).join('')
                    document.querySelector('#mensajes').innerHTML = cuerpoMensaje;
                } --}
        }

        function enviarMensaje() {
            const inputEmail = document.querySelector('#email')
            if (inputEmail.value.length == 0) {
                alert('Faltan datos')
                return
            }
            const inputMsg = document.querySelector('#comentario')
            const fecha = new Date().toLocaleString('es-CL')
            const msj = {
                author: inputEmail.value,
                text: inputMsg.value,
                date: fecha
            }
            socket.emit('from-client-message', msj);
        }

    </script>
</body>

</html>